
// seccion codigo
package JFLEX_Y_CUP;

import java_cup.runtime.*;
import java.util.ArrayList;
parser code {:

private Symbol s;
ArrayList<String> temp = new ArrayList<>();
ArrayList<ArrayList> instrucciones = new ArrayList<>();


public AnalizadorSintactico(AnalizadorLexico lexico){
    super(lexico);
}

public Symbol getS(){
return this.s;
}

//codigo java


    public ArrayList<String> getTemp() {
        return temp;
    }

    public void setTemp(ArrayList<String> temp) {
        this.temp = temp;
    }

    public ArrayList<ArrayList> getInstrucciones() {
        return instrucciones;
    }

    public void setInstrucciones(ArrayList<ArrayList> instrucciones) {
        this.instrucciones = instrucciones;
    }


    private void añadirString(String dato) {
        temp.add(dato);
    }
    
    private void reiniciarTemp() {
        if (temp.size() != 0) {
            instrucciones.add(temp);
        }
        temp = new ArrayList<>();
    }
         
 //tratamiento de errores
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }
:}




// seccion de terminales

/**
 * IMPORTANTE: FALLABA POR LO SIGUIENTE:
 * CADA VEZ QUE SE TRADUCE EL ARCHIVO CUP, TAMBIEN HAY QUE ACTUALIZAR EL ARCHIVO sym.java
 * Y A MI SE ME OLVIDÓ ESE PASO.
 * F por el inge XD
 */


terminal DEF, BARRAS, PIE, TITULO, EJEX, EJEY, ETIQUETAS, VALORES, UNIR, TIPO, CANTIDAD, PORCENTAJE, TOTAL, EXTRA,
PUNTO, COMA, PUNTOYCOMA, MAS, MENOS, POR, DIVIDIDO, PABIERTO, PCERRADO, CORABIERTO, CORCERRADO, LLABIERTO, LLCERRADO, COMILLA, CABIERTO, CCERRADO, COMENTARIO,
NUMERO, DECIMAL, CADENA;

// seccion de no termimales

non terminal    n, s3, s4, f, v, u, o, g, cp, m, bp, i;


start with n;
/*
s   ::= NUMERO:entero1 MAS NUMERO:entero2                   {: System.out.println(String.format("La suma es: %d", entero1 + entero2)); :}
    |   NUMERO:entero1 MAS NUMERO:entero2 COMA s            {: System.out.println(String.format("La suma es: %d", entero1 + entero2)); :}
    |   error  s                            {: System.out.println("accion desde gramatica"); :}
    ;
*/

n   ::= DEF bp n                   
    |   DEF bp 
    ;

bp  ::= BARRAS:b LLABIERTO s3 {:añadirString((String)b);reiniciarTemp();:}
    |   PIE:p LLABIERTO s4 {:añadirString((String)p);reiniciarTemp();:}
    ;

s3  ::= TITULO  CADENA:c  PUNTOYCOMA s3                 {:añadirString("T "+"\n"+ (String)c);:}
    |   EJEX CORABIERTO  i:e  CORCERRADO PUNTOYCOMA s3  {:añadirString("EX"+"\n"+(String)e);:}
    |   EJEY CORABIERTO f:d CORCERRADO PUNTOYCOMA s3    {:añadirString("EY "+"\n"+(String)d);:}
    |   UNIR CORABIERTO g:x CORCERRADO PUNTOYCOMA s3    {:añadirString(("U "+"\n"+(String)x));:}
    |   LLCERRADO  
    ;

s4  ::= TITULO  CADENA:c  PUNTOYCOMA s4                     {:añadirString("T "+"\n"+ (String)c);:}
    |   TIPO cp:c PUNTOYCOMA s4                             {:añadirString("TI "+"\n"+ (String)c);:}
    |   ETIQUETAS CORABIERTO  i:e  CORCERRADO PUNTOYCOMA s4 {:añadirString("ET"+"\n"+(String)e);:}
    |   VALORES CORABIERTO m:e CORCERRADO PUNTOYCOMA s4     {:añadirString("V"+"\n"+(String)e);:}
    |   TOTAL NUMERO:e PUNTOYCOMA s4                        {:añadirString("TO"+"\n"+(String)e);:}
    |   UNIR CORABIERTO g:e CORCERRADO PUNTOYCOMA s4        {:añadirString("U "+"\n"+(String)e);:}
    |   EXTRA  CADENA:e  PUNTOYCOMA s4                      {:añadirString("EXT"+"\n"+(String)e);:}
    |   LLCERRADO
    ;

cp  ::= CANTIDAD:c      {: RESULT = String.format("%s",c+"\n");:}
    |   PORCENTAJE:c    {: RESULT = String.format("%s",c+"\n");:}
    ;

m   ::= NUMERO:c COMA:co m:e   {: String cadena = (String)c +(String)co +"\n"+ (String)e; RESULT = cadena;:}
    |   NUMERO:c               {: RESULT = String.format("%s",c+"\n");:}
    ;

g   ::= LLABIERTO NUMERO:num1 COMA:c NUMERO:num2 LLCERRADO COMA g:e   {: String cadena = (String)num1 + (String)c +(String)num2 +"\n"+ (String)e; RESULT = cadena;:}
    |   LLABIERTO NUMERO:num1 COMA:c NUMERO:num2 LLCERRADO   {: String cadena = (String)num1+(String)c+(String)num2+"\n" ; RESULT = cadena;:}
    ;

f   ::= v:c COMA:co f:e    {: String cadena = (String)c +(String)co +"\n"+ (String)e; RESULT = cadena;:}
    |   v:c                {: RESULT = String.format("%s",c+"\n");:}
    ;
//poner (
v   ::= NUMERO:c               {: RESULT = String.format("%s",c);:}
    |   NUMERO:c u:e           {: String cadena = (String)c + (String)e; RESULT = cadena;:}
    ;

u   ::= o:c NUMERO:co u:e          {: String cadena = (String)c +(String)co + (String)e; RESULT = cadena;:}
    |   o:c NUMERO:co              {: String cadena = (String)c +(String)co; RESULT = cadena;:}
    |   o:c PABIERTO:pa NUMERO:x u:e PCERRADO:pc     {: String cadena = (String)c +(String)pa+(String)x +(String)e +(String)pc; RESULT = cadena;:}
    ;
	
o   ::= MAS:c       {: RESULT = String.format("%s",c);:}
    |   MENOS:c     {: RESULT = String.format("%s",c);:}
    |   POR:c       {: RESULT = String.format("%s",c);:}
    |   DIVIDIDO:c  {: RESULT = String.format("%s",c);:}
    ;

i   ::=  CADENA:c  COMA:co i:e   {: String cadena = (String)c +(String)co +"\n"+ (String)e; RESULT = cadena;:}
    |    CADENA:c                {: RESULT = String.format("%s",c+"\n");:}
    ;
